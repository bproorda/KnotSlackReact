{"version":3,"sources":["assests/KnotLogo.png","contexts/userContext.js","components/header/index.js","components/login/index.js","components/chatWindow/index.js","contexts/hubContext.js","components/generalChat/index.js","components/privateChat/index.js","components/groupChat/index.js","components/allUsers/index.js","components/userList/index.js","components/createGroup/index.js","components/channelList/index.js","components/chatCentral/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","usersAPI","UserContext","React","createContext","UserProvider","props","register","email","username","password","a","fetch","method","headers","body","JSON","stringify","result","json","ok","processToken","token","channels","login","lastVisited","logout","setState","user","permissions","cookie","remove","path","window","localStorage","removeItem","state","fakeUser","food","Date","payload","jwt","decode","exp","now","this","sub","setItem","save","e","console","warn","cookieToken","load","log","parse","getItem","lastTimeVisited","Provider","value","children","Component","Header","useContext","history","useHistory","className","src","logo","alt","Button","onClick","push","Login","useState","isRegistering","setIsRegistering","registrationFailed","setRegistrationFailed","match","onSubmit","preventDefault","type","target","elements","onChange","placeholder","name","ChatWindow","messages","count","map","msg","index","key","message","fullDate","date","toLocaleString","sender","contents","formatMessage","channelsAPI","HubContext","Consumer","HubProvider","context","fetchAllUsers","allUsers","fetchAllMessages","allMessages","concat","setConnection","hubConnection","HubConnectionBuilder","withUrl","configureLogging","LogLevel","Information","build","start","then","catch","recieveMessages","recieveUpdatedUser","on","currentMessages","Recipient","currentWindow","updateHasUnread","messageCount","length","bind","createWindows","windows","channel","hasUnread","checkForUnreads","channelName","some","createNewWindow","newWindow","currentWindows","unshift","doesWindowAlreadyExist","find","newCurrentWindow","addUserToGroup","newGroupUser","Username","ChannelName","updateLastVisitedWindow","theseWindows","desiredIndex","findIndex","book","userContext","hasUpdated","recipient","messgeCount","updateLastVisited","loggedInWhen","prevProps","prevState","invoke","err","error","toString","contextType","GeneralChat","setMessage","windowMessages","setWindowMessages","setMessageCount","useEffect","newMessages","filter","submitHandler","thisForm","connectionStarted","alert","reset","PrivateChat","GroupChat","connectToGroup","AllUsers","thisUser","setThisUser","currentOptions","search","options","UserList","getStyle","indexNumber","loggedIn","color","backgroundColor","style","listStyleType","overflow","maxHeight","CreateGroup","groupName","setGroupName","toggle","setToggle","ChannelList","ChatCentral","Zindex","whichChatComponent","App","exact","to","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1a10023.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KnotLogo.5f5460c1.png\";","import React from 'react';\r\nimport jwt from 'jsonwebtoken';\r\nimport cookie from 'react-cookies';\r\nconst usersAPI = 'https://localhost:5001/api/Users/';\r\n\r\nconst UserContext = React.createContext();\r\n\r\n\r\nexport default UserContext;\r\n\r\nexport class UserProvider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //dummy props\r\n            fakeUser: \"Bob\",\r\n            food: \"Favorite Food: Bacon\",\r\n            //real props\r\n            user: null,\r\n            permissions: [],\r\n            token: null,\r\n            channels: null,\r\n            lastVisited: new Date(0),\r\n            login: this.login,\r\n            logout: this.logout,\r\n            register: this.register,\r\n        }\r\n    }\r\n\r\n    register = async (email, username, password) => {\r\n        const result = await fetch(`${usersAPI}register`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email, username, password }),\r\n        });\r\n        //console.log(result);\r\n\r\n        const body = await result.json();\r\n\r\n        if (result.ok) {\r\n            if (this.processToken(body.token, body.channels)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    login = async (username, password) => {\r\n        const result = await fetch(`${usersAPI}login`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ username, password }),\r\n        });\r\n\r\n        const body = await result.json();\r\n        //console.log(body);\r\n\r\n        if (result.ok) {\r\n            if (this.processToken(body.token, body.channels, body.lastVisited)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        //TODO: userError state\r\n        this.logout();\r\n    }\r\n\r\n    logout = async (username) => {\r\n\r\n        const result = await fetch(`${usersAPI}logout`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ username, }),\r\n        });\r\n\r\n        if (result.ok) {\r\n            this.setState({ token: null, user: null, permissions: [] });\r\n            cookie.remove('auth', { path: \"/\" });\r\n            window.localStorage.removeItem(\"user\");\r\n            window.localStorage.removeItem(\"token\");\r\n        }\r\n    }\r\n\r\n    processToken(token, channels, lastVisited) {\r\n        try {\r\n            const payload = jwt.decode(token);\r\n            if (payload) {\r\n                if (payload.exp * 1000 < Date.now()) {\r\n                    this.logout(payload.sub);\r\n                    return;\r\n                }\r\n                if (true) {\r\n                    var user = payload.sub;\r\n                }\r\n                window.localStorage.setItem(\"channels\", JSON.stringify(channels));\r\n                window.localStorage.setItem(\"lastVisited\", JSON.stringify(lastVisited));\r\n                //console.log(user);\r\n                this.setState({\r\n                    token,\r\n                    user,\r\n                    channels,\r\n                    lastVisited,\r\n                    permissions: payload.permissions || [],\r\n                });\r\n                cookie.save('auth', token, { path: \"/\" });\r\n                return true;\r\n            }\r\n        } catch (e) {\r\n            console.warn(e);\r\n            this.logout();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const cookieToken = cookie.load('auth');\r\n        if (cookieToken) {\r\n            console.log('Found auth cookie!');\r\n            let channels = JSON.parse(window.localStorage.getItem('channels'));\r\n            let lastTimeVisited = JSON.parse(window.localStorage.getItem('lastVisited'));\r\n            this.processToken(cookieToken, channels, lastTimeVisited);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <UserContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </UserContext.Provider>\r\n        );\r\n    }\r\n}","import React, {useContext} from 'react';\r\nimport logo from '../../assests/KnotLogo.png';\r\nimport UserContext from '../../contexts/userContext';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './header.scss';\r\n\r\n\r\nfunction Header() {\r\n\r\n  const {user, logout} = useContext(UserContext);\r\n\r\n  let history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    console.log(\"logout was clicked\");\r\n    logout(user);\r\n    history.push(\"/\");\r\n  }\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Knot Slack\r\n          </p>\r\n          {user ? <Button className=\"logout\" onClick={logoutHandler}>Log Out</Button> : null}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Header;","import React, { useState, useContext } from 'react';\r\nimport UserContext from '../../contexts/userContext';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n\r\n    const { user, login, logout, register } = useContext(UserContext);\r\n\r\n    let history = useHistory();\r\n\r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [registrationFailed, setRegistrationFailed] = useState(false);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const { username, email, password } = e.target.elements;\r\n\r\n        let result = null;\r\n\r\n        if (!isRegistering) {\r\n\r\n            console.log(\"logging in\");\r\n\r\n            result = login(username.value, password.value);\r\n\r\n        } else {\r\n            console.log(\"registering\");\r\n\r\n            result = register(email.value, username.value, password.value);\r\n        }\r\n\r\n        if (result){ \r\n            history.push(\"/chat\")\r\n        } else {\r\n            setRegistrationFailed(true);\r\n        };\r\n    }\r\n\r\n    const toggleIsRegistering = () => {\r\n        //console.log(\"Registering new user!\");\r\n        setIsRegistering(!isRegistering);\r\n    }\r\n\r\n    const logoutSubmit = e => {\r\n        console.log(\"logging out user\");\r\n        e.preventDefault();\r\n        logout(user);\r\n        history.push(\"/\");\r\n\r\n    }\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"login\">\r\n                <h3>Welcome back, {user.username ? user.username.match(/^\\S*\\b/gm) : \"Friend\"}!</h3>\r\n                <form onSubmit={logoutSubmit}>\r\n                    <Button type=\"submit\" >Log Out</Button>\r\n                    <Button onClick={() => history.push(\"/chat\")} >To Chat</Button>\r\n                </form>\r\n            </div>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {(!registrationFailed) ? null : isRegistering ? <h3>Registration Failed</h3> : <h3>Login Failed</h3>}\r\n        <form onSubmit={handleSubmit} className=\"login\">\r\n            <label>\r\n                I am a registering as a new user\r\n                <input type=\"checkbox\" onChange={toggleIsRegistering} />\r\n            </label>\r\n            <label>\r\n                Username\r\n            <input placeholder=\"Username\" name=\"username\" />\r\n            </label>\r\n            {isRegistering ?             <label>\r\n                Email\r\n            <input placeholder=\"Email\" name=\"email\" />\r\n            </label> : null}\r\n            <label>\r\n                password\r\n            <input placeholder=\"Password\" type=\"password\" name=\"password\" />\r\n            </label>\r\n            <Button type=\"submit\">Login</Button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './chatWindow.scss';\r\n\r\nexport default function ChatWindow(props) {\r\n\r\n    const { messages, count } = props;\r\n\r\n    const formatMessage = (message) => {\r\n        let fullDate = new Date(Date.parse(message.date));\r\n        return `${fullDate.toLocaleString()}  ${message.sender}: ${message.contents}`;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h2>Messages: {count}</h2>\r\n                <ul>\r\n                    {messages.map((msg, index) => (\r\n                        <li key={index}>{formatMessage(msg)}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport {\r\n  HubConnectionBuilder,\r\n  LogLevel,\r\n} from '@microsoft/signalr/dist/browser/signalr';\r\nimport UserContext from './userContext';\r\n//import context from 'react-bootstrap/esm/AccordionContext';\r\nconst usersAPI = 'https://localhost:5001/api/Users/';\r\nconst messagesAPI = 'https://localhost:5001/api/messages/';\r\nconst channelsAPI = 'https://localhost:5001/api/channels/';\r\n\r\nexport const HubContext = React.createContext();\r\n\r\nexport const HubConsumer = HubContext.Consumer\r\n\r\nexport default HubContext;\r\n\r\nexport class HubProvider extends React.Component {\r\n  static contextType = UserContext;\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      //dummy prop\r\n      book: \"Favorie Book: Dune\",\r\n      userContext: context,\r\n      allUsers: null,\r\n\r\n      //hubContext props\r\n      hubConnection: null,\r\n      setConnection: null,\r\n      hasUpdated: false,\r\n      channelsAPI: channelsAPI,\r\n      messages: [{ date: \"1970-01-01T00:00:00.000Z\", sender: \"Diana Trouble\", contents: \"Hello World!\", recipient: \"General\" }],\r\n      messgeCount: 0,\r\n      currentWindow: { name: \"General\", type: \"General\" },\r\n      windows: [],\r\n      doesWindowAlreadyExist: this.doesWindowAlreadyExist,\r\n      addUserToGroup: this.addUserToGroup,\r\n      updateLastVisited: this.updateLastVisited,\r\n\r\n      //UserContext props\r\n      user: context.user,\r\n      loggedInWhen: context.lastVisited,\r\n    }\r\n  }\r\n\r\n\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (!this.state.hasUpdated) {\r\n      this.setState({ hasUpdated: true });\r\n    }\r\n\r\n    if (this.context.user !== prevState.user && !this.state.hasUpdated) {\r\n      console.log(\"update is running!\")\r\n      await this.setConnection();\r\n      await this.fetchAllUsers();\r\n      await this.fetchAllMessages();\r\n      this.createWindows();\r\n    }\r\n  }\r\n\r\n  async componentWillUnmount() {\r\n    if (this.state.user !== null) {\r\n      await this.state.hubConnection.invoke(\"UpdateLastVisited\", this.context.user).catch(function (err) {\r\n        return console.error(err.toString());\r\n      });\r\n      window.localStorage.setItem(\"lastVisited\", new Date());\r\n      this.setState({ hubConnection: null });\r\n    }\r\n  }\r\n\r\n  fetchAllUsers = async () => {\r\n    const result = await fetch(`${usersAPI}allusers`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.context.token}`\r\n      },\r\n    });\r\n\r\n    const body = await result.json();\r\n    //console.log(body);\r\n\r\n    if (result.ok) {\r\n      this.setState({ allUsers: body });\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  fetchAllMessages = async () => {\r\n    const result = await fetch(`${messagesAPI}mymsg`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.context.token}`\r\n      },\r\n    });\r\n\r\n    const body = await result.json();\r\n    //console.log(body);\r\n\r\n    if (result.ok) {\r\n      let allMessages = this.state.messages.concat(body);\r\n      this.setState({ messages: allMessages });\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  setConnection = async () => {\r\n    let hubConnection = new HubConnectionBuilder()\r\n      .withUrl(\"https://localhost:5001/chatHub\")\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    await hubConnection.start()\r\n      .then(result => {\r\n        console.log('Connected!');\r\n      })\r\n      .catch(e => console.log('Connection failed: ', e));\r\n\r\n    this.setState({ hubConnection: hubConnection });\r\n    this.recieveMessages(hubConnection);\r\n    this.recieveUpdatedUser(hubConnection);\r\n  };\r\n\r\n  recieveMessages = async (hubConnection) => {\r\n    hubConnection.on('ReceiveMessage', async function (message) {\r\n      //console.log(\"messages received\");\r\n      var msg = message;\r\n      //console.log(msg);\r\n      let currentMessages = this.state.messages ? this.state.messages : [];\r\n      currentMessages.push(msg);\r\n      if (msg.Recipient !== this.state.currentWindow.name) this.updateHasUnread(msg.Recipient);\r\n      this.setState({ messages: currentMessages, messageCount: currentMessages.length });\r\n\r\n    }.bind(this));\r\n  }\r\n\r\n  recieveUpdatedUser = async (hubConnection) => {\r\n    hubConnection.on('UpdateUsers', async function (user) {\r\n      //console.log(user);\r\n    });\r\n  }\r\n\r\n  createWindows = () => {\r\n    let windows = this.context.channels.map((channel, index) => (\r\n      { name: channel.name, type: channel.type, lastVisited: new Date(0), hasUnread: this.checkForUnreads(channel.name) }\r\n    ));\r\n    //console.log(windows);\r\n    this.setState({ windows: windows });\r\n  };\r\n\r\n  checkForUnreads = channelName => {\r\n    let currentMsgs = this.state.messages;\r\n    let result = currentMsgs.some(msg => msg.Date > this.context.lastVisited);\r\n    if (result) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  createNewWindow = async (name, type) => {\r\n    let newWindow = { name: name, type: type, lastVisited: new Date(), hasUnread: false };\r\n    let currentWindows = this.state.windows;\r\n    currentWindows.unshift(newWindow);\r\n    this.setState({ windows: currentWindows });\r\n\r\n    //sending new window to api\r\n    await fetch(`${channelsAPI}`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.context.token}`\r\n      },\r\n      body: JSON.stringify(newWindow),\r\n    });\r\n  }\r\n\r\n  doesWindowAlreadyExist = async (name, type) => {\r\n    let result = this.state.windows.find(window => name === window.name && type === window.type);\r\n    if (!result) {\r\n      await this.createNewWindow(name, type);\r\n    }\r\n    let newCurrentWindow = { name: name, type: type };\r\n    this.setState({ currentWindow: newCurrentWindow });\r\n  }\r\n\r\n  addUserToGroup = async (username, channelName) => {\r\n\r\n    let newGroupUser = { Username: username, ChannelName: channelName };\r\n    await fetch(`${channelsAPI}newuc`, {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.context.token}`\r\n      },\r\n      body: JSON.stringify(newGroupUser),\r\n    });\r\n  }\r\n\r\n  updateLastVisitedWindow = (channelName) => {\r\n    let theseWindows = this.state.windows;\r\n    let desiredIndex = theseWindows.findIndex(window => window.name === channelName);\r\n    theseWindows[desiredIndex].lastVisited = new Date();\r\n    this.setState({ windows: theseWindows });\r\n  }\r\n\r\n  updateHasUnread = (channelName) => {\r\n    let theseWindows = this.state.windows;\r\n    let desiredIndex = theseWindows.findIndex(window => window.name === channelName);\r\n    theseWindows[desiredIndex].hasUnread = new Date();\r\n    this.setState({ windows: theseWindows });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <HubContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </HubContext.Provider>\r\n    );\r\n  }\r\n}","import React, { useState, useEffect, useContext } from 'react';\r\nimport ChatWindow from '../chatWindow';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport './genChat.scss';\r\n\r\n\r\n\r\nexport default function GeneralChat(props) {\r\n\r\n    const { user, messages, hubConnection } = useContext(HubContext);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [windowMessages, setWindowMessages] = useState([]);\r\n\r\n    const [messageCount, setMessageCount] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        let newMessages = messages.filter(msg => msg.recipient === \"General\");\r\n        setWindowMessages(newMessages);\r\n     }, [messages]);\r\n\r\n    useEffect(() => {\r\n        setMessageCount(windowMessages.length);\r\n    }, [windowMessages]);\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault();\r\n        let thisForm = e.target;\r\n\r\n        if (hubConnection.connectionStarted) {\r\n            console.log(\"sending!\")\r\n            await hubConnection.invoke(\"SendMessage\", user, \"General\", message).catch(function (err) {\r\n                return console.error(err.toString());\r\n            });\r\n        }\r\n        else {\r\n            alert('No connection to server yet.');\r\n        }\r\n        thisForm.reset();\r\n    };\r\n\r\n    const changeHandler = e => {\r\n        setMessage(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Chat\">\r\n            <ChatWindow messages={windowMessages} count={messageCount} />\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    <input type=\"text\" name=\"name\" onChange={changeHandler} />\r\n                </label>\r\n                <button name=\"name\" type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react';\r\nimport ChatWindow from '../chatWindow';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport './privChat.scss';\r\n\r\n\r\n\r\nexport default function PrivateChat(props) {\r\n\r\n\r\n    const { user, messages, hubConnection } = useContext(HubContext);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [windowMessages, setWindowMessages] = useState([]);\r\n\r\n    const [messageCount, setMessageCount] = useState(0);\r\n\r\n    const recipient = props.name;\r\n\r\n\r\n    useEffect(() => {\r\n        let newMessages = messages.filter(msg => msg.recipient === recipient);\r\n        setWindowMessages(newMessages);\r\n    }, [messages, recipient]);\r\n\r\n    useEffect(() => {\r\n        setMessageCount(windowMessages.length);\r\n    }, [windowMessages]);\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault();\r\n        let thisForm = e.target;\r\n\r\n        if (hubConnection.connectionStarted) {\r\n            console.log(\"sending!\")\r\n            console.log(`${user} to ${recipient}: ${message}`);\r\n            await hubConnection.invoke(\"SendPrivateMessage\", user, recipient, message).catch(function (err) {\r\n                return console.error(err.toString());\r\n            });\r\n        }\r\n        else {\r\n            alert('No connection to server yet.');\r\n        }\r\n        thisForm.reset();\r\n    };\r\n\r\n    const changeHandler = e => {\r\n        setMessage(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Chat\" >\r\n            <ChatWindow messages={windowMessages} count={messageCount} />\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    <input type=\"text\" name=\"name\" onChange={changeHandler} />\r\n                </label>\r\n                <button name=\"name\" type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react';\r\nimport ChatWindow from '../chatWindow';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport './groupChat.scss';\r\n\r\n\r\n\r\nexport default function GroupChat(props) {\r\n\r\n    const { user, messages, hubConnection } = useContext(HubContext);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [windowMessages, setWindowMessages] = useState([]);\r\n\r\n    const [messageCount, setMessageCount] = useState(0);\r\n\r\n    const channelName = props.name;\r\n\r\n    useEffect(() => {\r\n        let newMessages = messages.filter(msg => msg.recipient === channelName);\r\n        setWindowMessages(newMessages);\r\n    }, [messages, channelName]);\r\n\r\n    useEffect(() => {\r\n        setMessageCount(windowMessages.length);\r\n    }, [windowMessages]);\r\n\r\n    useEffect(() => {\r\n        connectToGroup();\r\n    });\r\n\r\n    const connectToGroup = async () => {\r\n        if (hubConnection.connectionStarted) {\r\n            console.log(\"Connect to group!\");\r\n            await hubConnection.invoke(\"AddToGroup\", channelName).catch(function (err) {\r\n                return console.error(err.toString());\r\n            });\r\n        }\r\n    }\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault();\r\n        let thisForm = e.target;\r\n\r\n        if (hubConnection.connectionStarted) {\r\n            console.log(\"sending!\")\r\n            await hubConnection.invoke(\"SendGroupMessage\", user, channelName, message).catch(function (err) {\r\n                return console.error(err.toString());\r\n            });\r\n        }\r\n        else {\r\n            alert('No connection to server yet.');\r\n        }\r\n        thisForm.reset();\r\n    };\r\n\r\n    const changeHandler = e => {\r\n        setMessage(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Chat\" >\r\n            <ChatWindow messages={windowMessages} count={messageCount} />\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    <input type=\"text\" name=\"name\" onChange={changeHandler} />\r\n                </label>\r\n                <button name=\"name\" type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useContext, useState } from 'react';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SelectSearch from 'react-select-search';\r\nimport './allUsers.scss';\r\n\r\nexport default function AllUsers(props) {\r\n\r\n    const { allUsers, doesWindowAlreadyExist, currentWindow, addUserToGroup } = useContext(HubContext);\r\n    const [thisUser, setThisUser] = useState(null);\r\n    const currentOptions = allUsers ? allUsers.map((user) => ({ name: user.username, value: user.username })) : [{ name: \"Loading!\", value: \"Loading!\" }];\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>All Users</h3>\r\n            <p>Select a User to send them a Private Message {currentWindow.type === \"Group\" ? \"or add to current group\" : null}</p>\r\n            <SelectSearch\r\n                placeholder=\"Select a User\"\r\n                onChange={setThisUser}\r\n                search\r\n                options={currentOptions}></SelectSearch>\r\n            <Button onClick={() => doesWindowAlreadyExist(thisUser, \"Private\")}>Send PM</Button>\r\n            {currentWindow.type === \"Group\" ? <Button onClick={() => addUserToGroup(thisUser, currentWindow.name)}>Add to Group</Button> : null}\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport AllUsers from '../allUsers';\r\nimport '../channelList/channelList.scss';\r\n\r\n\r\nexport default function UserList(props) {\r\n\r\n    const { allUsers, doesWindowAlreadyExist, windows } = useContext(HubContext);\r\n\r\n    //console.log(allUsers);\r\n    //console.log(windows);\r\n\r\n    const getStyle = (username) => {\r\n        var style = null;\r\n\r\n        var indexNumber = allUsers.findIndex(user => user.username === username);\r\n\r\n        if (indexNumber > 0 && allUsers[indexNumber].loggedIn) {\r\n            style = { color: \"white\", backgroundColor: \"blue\" };\r\n        } else {\r\n            style = { color: \"black\", backgroundColor: \"lightgray\" };\r\n        };\r\n        return style;\r\n    }\r\n\r\n    const clickHandler = (name) => {\r\n        doesWindowAlreadyExist(name, \"Private\");\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>Your Neighbors</h3>\r\n            <ul style={{ listStyleType: \"none\", overflow: \"auto\", maxHeight: \"50%\" }}>\r\n                {(windows !== null) ? windows.filter(channel => channel.type === \"Private\").map((channel, index) => (\r\n                    <li key={index} className={channel.hasUnread ? \"BlinkBlink\" : \"\"}><Button onClick={() => clickHandler(channel.name)} style={getStyle(channel.name)} >{channel.name}</Button></li>\r\n                )) : null}\r\n            </ul>\r\n            <AllUsers />\r\n        </>\r\n    )\r\n}","import React, { useContext, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport HubContext from '../../contexts/hubContext';\r\n\r\n\r\n\r\nexport default function CreateGroup(props) {\r\n\r\n    const { doesWindowAlreadyExist } = useContext(HubContext);\r\n    const [groupName, setGroupName] = useState();\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n\r\n    const viewForm = () => {\r\n        setToggle(!toggle);\r\n    };\r\n\r\n    const changeHandler = (e) => {\r\n        setGroupName(e.target.value);\r\n    };\r\n\r\n    const submitHandler = async () => {\r\n        await doesWindowAlreadyExist(groupName, \"Group\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={viewForm}>Create a New Group </Button>\r\n            {toggle ? <form onSubmit={submitHandler}>\r\n                <label>Name: </label>\r\n                <input type=\"text\" onChange={changeHandler}></input>\r\n                <button type=\"submit\">Submit</button>\r\n            </form> : null}\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport CreateGroup from '../createGroup';\r\nimport './channelList.scss'\r\n\r\n\r\nexport default function ChannelList(props) {\r\n\r\n    const { windows, doesWindowAlreadyExist } = useContext(HubContext);\r\n\r\n    const clickHandler = (name, type) => {\r\n        console.log(`name: ${name} type: ${type}`);\r\n        doesWindowAlreadyExist(name, type);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Your Channels</h3>\r\n            <CreateGroup />\r\n            <ul style={{ listStyleType: \"none\", overflow: \"auto\", maxHeight: \"50%\" }}>\r\n                {(windows !== null) ? windows.filter(channel => channel.type === \"Group\" || channel.type === \"General\").map((channel, index) => (\r\n                    <li key={index} className={channel.hasUnread ? \"BlinkBlink\" : \"\"}><Button onClick={() => clickHandler(channel.name, channel.type)} >{channel.name}</Button></li>\r\n                )) : null}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useContext} from 'react';\r\nimport GeneralChat from '../generalChat';\r\nimport PrivateChat from '../privateChat';\r\nimport GroupChat from '../groupChat';\r\nimport HubContext from '../../contexts/hubContext';\r\nimport UserList from '../userList'\r\nimport ChannelList from '../channelList'\r\n\r\n\r\nexport default function ChatCentral(props) {\r\n\r\n    const { windows, currentWindow } = useContext(HubContext);\r\n\r\n    //const [message, setMessage] = useState(\"\");\r\n\r\nconst whichChatComponent = (window, index) => {\r\n    if(window.type === \"General\") {\r\n        return <GeneralChat Zindex={window.Zindex} key={index} />\r\n    } else if (window.type === \"Private\") {\r\n        return <PrivateChat name={window.name} Zindex={window.Zindex} key={index}/>\r\n    } else if (window.type === \"Group\") {\r\n        return <GroupChat name={window.name} Zindex={window.Zindex} key={index}/>\r\n    }\r\n};\r\n\r\n\r\n    return (\r\n        <div>\r\n            {windows.filter(window => window.name === currentWindow.name).map((window, index) => {\r\n               return whichChatComponent(window, index)\r\n            })}\r\n            <span className=\"theList\">\r\n                <ChannelList />\r\n                <UserList />\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React, {useContext} from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport Header from './components/header';\r\nimport Login from './components/login';\r\nimport ChatCentral from './components/chatCentral';\r\nimport UserContext from './contexts/userContext';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const { user } = useContext(UserContext);\r\n\r\n  return (\r\n    <>\r\n    <Header />\r\n    <Switch>\r\n      <Route exact path = \"/\">\r\n      {user ? <Redirect to=\"/chat\" /> : <Login /> }\r\n      </Route>\r\n      <Route path = \"/chat\">\r\n      {user ? <ChatCentral /> : <Redirect to=\"/\" />}\r\n      \r\n      </Route>\r\n    </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { UserProvider } from './contexts/userContext';\r\nimport { HubProvider } from './contexts/hubContext';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <UserProvider>\r\n          <HubProvider>\r\n            <App />\r\n          </HubProvider>\r\n      </UserProvider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}